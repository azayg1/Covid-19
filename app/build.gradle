apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def credentialFile = rootProject.file("credentials.properties")
def credentialProperty = new Properties()
credentialProperty.load(new FileInputStream(credentialFile))

android {
    signingConfigs {
        covid {
            storeFile file(cred.keyPath)
            storePassword cred.keyPwd
            keyAlias cred.keyAlias
            keyPassword cred.keyPwd
        }
    }
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "in.company.covid_19"
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode 1
        versionName "1.0.1"
        buildConfigField("String", "API_KEY", credentialProperty['API_KEY'])
        buildConfigField("String", "BASE_URL", credentialProperty['BASE_URL'])
        buildConfigField("String", "HOST", credentialProperty['HOST'])
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildFeatures {
        dataBinding true
    }


    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.covid
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
    flavorDimensions "version"
    productFlavors {

        full {
            dimension "version"
            applicationIdSuffix ".full"
            versionNameSuffix "-full"
        }

        demo {
            dimension "version"
            applicationIdSuffix ".demo"
            versionNameSuffix "-demo"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    // Support Libraries
    implementation "androidx.appcompat:appcompat:$appcompat"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okHttpVersion"

    //androidx
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "androidx.recyclerview:recyclerview:$recyclerview"
    implementation "androidx.core:core-ktx:$core_ktx"
    implementation "androidx.constraintlayout:constraintlayout:$constraintlayout"
    implementation 'androidx.fragment:fragment-ktx:1.2.5'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0'

    // Room
    implementation "androidx.room:room-runtime:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"

    implementation 'com.google.android.material:material:1.2.1'

    // Dagger core
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    //Dagger Android
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"
    implementation 'com.android.support:multidex:1.0.3'

   // Testing
    testImplementation "junit:junit:$jUnitVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$mockwebserverVersion"
    testImplementation "androidx.arch.core:core-testing:$coreTestingVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"


}